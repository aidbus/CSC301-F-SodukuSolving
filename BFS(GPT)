class SudokuBFS {
    public boolean solve(SudokuGraph graph) {
        Queue<int[][]> queue = new LinkedList<>();
        queue.add(graph.copyGrid());

        while (!queue.isEmpty()) {
            int[][] currentGrid = queue.poll();

            SudokuGraph currentGraph = new SudokuGraph(currentGrid);

            if (currentGraph.isSolved()) {
                System.out.println("Solved Sudoku using BFS:");
                currentGraph.printGrid();
                return true;
            }

            for (int row = 0; row < currentGrid.length; row++) {
                for (int col = 0; col < currentGrid[row].length; col++) {
                    if (currentGrid[row][col] == 0) {
                        List<Integer> possibleValues = currentGraph.getPossibleValues(row, col);

                        for (int value : possibleValues) {
                            int[][] nextGrid = currentGraph.copyGrid();
                            nextGrid[row][col] = value;
                            queue.add(nextGrid);
                        }
                        return false; // Process one cell at a time
                    }
                }
            }
        }

        System.out.println("No solution found using BFS.");
        return false;
    }
}
