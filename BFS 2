import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;
import java.util.Set;
import java.util.Arrays;

class SudokuBFS {
    private int solution_count = 0;  // Counter to track the number of solutions
    private Set<String> solvedStates = new HashSet<>();  // Set to store solved grids and ensure uniqueness
    private boolean printedSolution = false;  // Flag to check if a solution has been printed

    public boolean solve(SudokuGraph graph) {
        Queue<SudokuGraph> queue = new LinkedList<>();
        queue.add(graph);

        while (!queue.isEmpty()) {
            SudokuGraph currentGraph = queue.poll();

            // Check if the current grid is solved
            if (currentGraph.isSolved()) {
                // Convert the solved grid to a string to compare if it's a new solution
                String solvedGrid = gridToString(currentGraph);
                if (!solvedStates.contains(solvedGrid)) {
                    solvedStates.add(solvedGrid); // Mark this solution as unique
                    solution_count++; // Increment the solution count when a new solution is found

                    // Print the first solution
                    if (!printedSolution) {
                        System.out.println("Solution:");
                        currentGraph.printGrid();
                        printedSolution = true;
                    }
                }
                continue; // Continue to explore other possible solutions
            }

            // Find the first empty cell and generate possibilities for it
            boolean foundEmptyCell = false;
            for (int row = 0; row < currentGraph.getSize(); row++) {
                for (int col = 0; col < currentGraph.getSize(); col++) {
                    if (currentGraph.getCell(row, col) == 0) { // Empty cell found
                        List<Integer> possibleValues = currentGraph.getPossibleValues(row, col);

                        for (int value : possibleValues) {
                            // Create a new grid with the current value filled in
                            int[][] nextGrid = currentGraph.copyGrid();
                            nextGrid[row][col] = value;
                            SudokuGraph nextGraph = new SudokuGraph(nextGrid); // Create a new SudokuGraph

                            // Add the new graph to the queue to explore further
                            queue.add(nextGraph);
                        }

                        foundEmptyCell = true;
                        break; // Process only one empty cell at a time
                    }
                }
                if (foundEmptyCell) break;
            }
        }

        // Print the total number of solutions found
        System.out.println("Total solutions found: " + solution_count);
        return solution_count > 0;
    }

    // Converts the grid to a string representation for uniqueness check
    private String gridToString(SudokuGraph graph) {
        StringBuilder sb = new StringBuilder();
        int[][] grid = graph.copyGrid();
        for (int[] row : grid) {
            for (int cell : row) {
                sb.append(cell);
            }
        }
        return sb.toString();
    }
}
