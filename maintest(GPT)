import java.io.*;

public class Main {
    public static void main(String[] args) {
        // Create 3 Sudoku grids for easy, medium, and hard difficulties
        int[][] easyGrid = new int[9][9];
        int[][] mediumGrid = new int[9][9];
        int[][] hardGrid = new int[9][9];

        // Read the grids from the file
        try (BufferedReader reader = new BufferedReader(new FileReader("gridsforsudoku.txt"))) {
            String line;
            int currentGrid = -1;  // -1 = none, 0 = easy grid, 1 = medium grid, 2 = hard grid
            int row = 0;

            while ((line = reader.readLine()) != null) {
                line = line.trim(); // Remove any leading/trailing whitespace
                // Skip empty lines
                if (line.isEmpty()) continue;
                // Check difficulty level
                if (line.equalsIgnoreCase("easy")) {
                    currentGrid = 0;
                    row = 0; // Reset row for easy grid
                } else if (line.equalsIgnoreCase("medium")) {
                    currentGrid = 1;
                    row = 0; // Reset row for medium grid
                } else if (line.equalsIgnoreCase("hard")) {
                    currentGrid = 2;
                    row = 0; // Reset row for hard grid
                } else if (currentGrid != -1) {
                    // read 9 digits and store in the right grid
                    if (line.length() == 9) {
                        for (int col = 0; col < 9; col++) {
                            int num = Character.getNumericValue(line.charAt(col)); // Convert each character to an integer
                            if (currentGrid == 0) {
                                easyGrid[row][col] = num;
                            } else if (currentGrid == 1) {
                                mediumGrid[row][col] = num;
                            } else if (currentGrid == 2) {
                                hardGrid[row][col] = num;
                            }
                        }
                        row++;
                    } else {
                        System.out.println("Skipping invalid line: '" + line + "'");
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Solve and print results for each grid
        solveAndPrint("Easy", easyGrid);
        solveAndPrint("Medium", mediumGrid);
        solveAndPrint("Hard", hardGrid);
    }

    // Helper method to solve and print results
    private static void solveAndPrint(String difficulty, int[][] grid) {
        System.out.println("Attempting to solve " + difficulty + " Sudoku grid...");

        // Run BFS
        SudokuGraph bfsGraph = new SudokuGraph(grid); // Fresh graph for BFS
        SudokuBFS bfsSolver = new SudokuBFS();
        long bfsStartTime = System.nanoTime(); // Start timing BFS
        boolean bfsSolved = bfsSolver.solve(bfsGraph);
        long bfsEndTime = System.nanoTime(); // End timing BFS
        if (bfsSolved) {
            System.out.println(difficulty + " BFS solved the puzzle in " + (bfsEndTime - bfsStartTime) / 1_000_000 + " ms.");
        } else {
            System.out.println(difficulty + " BFS failed to solve the puzzle.");
        }

        // Run DLS
        SudokuGraph dlsGraph = new SudokuGraph(grid); // Fresh graph for DLS
        SudokuDLS dlsSolver = new SudokuDLS();
        long dlsStartTime = System.nanoTime(); // Start timing DLS
        boolean dlsSolved = dlsSolver.solve(dlsGraph, 81); // Depth limit is the total number of cells
        long dlsEndTime = System.nanoTime(); // End timing DLS
        if (dlsSolved) {
            System.out.println(difficulty + " DLS solved the puzzle in " + (dlsEndTime - dlsStartTime) / 1_000_000 + " ms.");
        } else {
            System.out.println(difficulty + " DLS failed to solve the puzzle.");
        }

        // Optionally print the solved grid
        //System.out.println(difficulty + " Solved Sudoku Grid:");
        //printGrid(grid);
    }

    // Helper method to print a Sudoku grid
    public static void printGrid(int[][] grid) {
        for (int i = 0; i < 9; i++) {
            for (int j = 0; j < 9; j++) {
                System.out.print(grid[i][j] + " ");
            }
            System.out.println();
        }
    }
}
